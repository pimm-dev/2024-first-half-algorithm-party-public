<?xml version="1.0" encoding="utf-8" standalone="no"?>
<problem revision="21" short-name="three-xor-query" url="https://polygon.codeforces.com/p6Pz1fr/jh01533/three-xor-query">
    <names>
        <name language="korean" value="세 수 XOR과 쿼리"/>
    </names>
    <statements>
        <statement charset="UTF-8" language="korean" mathjax="true" path="statements/korean/problem.tex" type="application/x-tex"/>
        <statement charset="UTF-8" language="korean" mathjax="true" path="statements/.html/korean/problem.html" type="text/html"/>
    </statements>
    <judging cpu-name="Intel(R) Core(TM) i3-8100 CPU @ 3.60GHz" cpu-speed="3600" input-file="" output-file="" run-count="1">
        <testset name="tests">
            <time-limit>2000</time-limit>
            <memory-limit>1073741824</memory-limit>
            <test-count>34</test-count>
            <input-path-pattern>tests/%02d</input-path-pattern>
            <answer-path-pattern>tests/%02d.a</answer-path-pattern>
            <tests>
                <test method="manual" sample="true"/>
                <test cmd="AllSetRandomGenerator 10 100 300000 0 63 1 1 1 100 1 100 0 63 1 100 1 100 0 63 1" method="generated"/>
                <test cmd="AllSetRandomGenerator 10 100 300000 0 63 1 1 1 100 1 100 0 63 1 100 1 100 0 63 2" method="generated"/>
                <test cmd="AllSetRandomGenerator 10 100 300000 0 63 1 1 1 100 1 100 0 63 1 100 1 100 0 63 3" method="generated"/>
                <test cmd="AllSetRandomGenerator 10 100 300000 0 63 1 1 1 100 1 100 0 63 1 100 1 100 0 63 4" method="generated"/>
                <test cmd="AllSetRandomGenerator 10 100 300000 0 63 1 1 1 100 1 100 0 63 1 100 1 100 0 63 5" method="generated"/>
                <test cmd="AllSetRandomGenerator 10 100 300000 0 63 1 1 1 100 1 100 0 63 1 100 1 100 0 63 6" method="generated"/>
                <test cmd="AllSetRandomGenerator 10 100 300000 0 63 1 1 1 100 1 100 0 63 1 100 1 100 0 63 7" method="generated"/>
                <test cmd="AllSetRandomGenerator 10 100 300000 0 63 1 1 1 100 1 100 0 63 1 100 1 100 0 63 8" method="generated"/>
                <test cmd="AllSetRandomGenerator 10 100 300000 0 63 1 1 1 100 1 100 0 63 1 100 1 100 0 63 9" method="generated"/>
                <test cmd="AllSetRandomGenerator 10 100 300000 0 63 1 1 1 100 1 100 0 63 1 100 1 100 0 63 10" method="generated"/>
                <test cmd="AllSetRandomGenerator 10 100 300000 0 63 1 0 1 100 1 100 0 63 1 100 1 100 0 63 1" method="generated"/>
                <test cmd="AllSetRandomGenerator 10 100 300000 0 63 1 0 1 100 1 100 0 63 1 100 1 100 0 63 2" method="generated"/>
                <test cmd="AllSetRandomGenerator 10 100 300000 0 63 0 1 1 100 1 100 0 63 1 100 1 100 0 63 1" method="generated"/>
                <test cmd="AllSetRandomGenerator 10 100 300000 0 63 0 1 1 100 1 100 0 63 1 100 1 100 0 63 2" method="generated"/>
                <test cmd="AllSetRandomGenerator 200000 300000 300000 0 63 1 1 1 300000 1 300000 0 63 1 300000 1 300000 0 63" method="generated"/>
                <test cmd="AllSetRandomGenerator 200000 300000 300000 0 63 1 0 1 300000 1 300000 0 63 1 300000 1 300000 0 63" method="generated"/>
                <test cmd="AllSetRandomGenerator 200000 300000 300000 0 63 0 1 1 300000 1 300000 0 63 1 300000 1 300000 0 63" method="generated"/>
                <test cmd="NoGenerator 300000 300000 5 1 0" method="generated"/>
                <test cmd="NoGenerator 300000 300000 4 1 0" method="generated"/>
                <test cmd="NoGenerator 300000 300000 3 1 0" method="generated"/>
                <test cmd="NoGenerator 300000 300000 2 1 0" method="generated"/>
                <test cmd="NoGenerator 300000 300000 1 1 0" method="generated"/>
                <test cmd="NoGenerator 300000 300000 0 1 0" method="generated"/>
                <test cmd="AllSetRandomGenerator 300000 300000 300000 0 63 1 1 1 1000 299000 300000 0 63 1 1000 299000 300000 0 63" method="generated"/>
                <test cmd="AllSetRandomGenerator 300000 300000 300000 0 63 0 1 1 1000 299000 300000 0 63 1 1000 299000 300000 0 63" method="generated"/>
                <test cmd="AllSetRandomGenerator 300000 300000 300000 0 63 1 0 1 1000 299000 300000 0 63 1 1000 299000 300000 0 63" method="generated"/>
                <test cmd="RangeSetGenerator 300000 300000 300000 63 1 1 3 50" method="generated"/>
                <test cmd="RangeSetGenerator 300000 300000 300000 63 1 0 3 50" method="generated"/>
                <test cmd="RangeSetGenerator 300000 300000 300000 63 0 1 3 50" method="generated"/>
                <test cmd="RangeSetGenerator 300000 300000 300000 7 1 0 3 20" method="generated"/>
                <test cmd="RangeSetGenerator 300000 300000 300000 1 1 0 3 10" method="generated"/>
                <test cmd="AllSetRandomGenerator 300000 300000 300000 0 63 0 1 1 1000 299000 300000 0 63 1 1000 299000 300000 63 63" method="generated"/>
                <test method="manual"/>
            </tests>
        </testset>
    </judging>
    <files>
        <resources>
            <file path="files/olymp.sty"/>
            <file path="files/problem.tex"/>
            <file path="files/statements.ftl"/>
            <file path="files/testlib.h" type="h.g++"/>
        </resources>
        <executables>
            <executable>
                <source path="files/AllSetRandomGenerator.cpp" type="cpp.g++17"/>
            </executable>
            <executable>
                <source path="files/MaxGenerator.cpp" type="cpp.g++17"/>
            </executable>
            <executable>
                <source path="files/NoGenerator.cpp" type="cpp.g++17"/>
            </executable>
            <executable>
                <source path="files/RandomGenerator.cpp" type="cpp.g++17"/>
            </executable>
            <executable>
                <source path="files/RangeSetGenerator.cpp" type="cpp.g++17"/>
            </executable>
            <executable>
                <source path="files/Validator.cpp" type="cpp.g++17"/>
            </executable>
        </executables>
    </files>
    <assets>
        <checker name="std::lcmp.cpp" type="testlib">
            <source path="files/check.cpp" type="cpp.g++17"/>
            <copy path="check.cpp"/>
            <testset>
                <test-count>0</test-count>
                <input-path-pattern>files/tests/checker-tests/%02d</input-path-pattern>
                <output-path-pattern>files/tests/checker-tests/%02d.o</output-path-pattern>
                <answer-path-pattern>files/tests/checker-tests/%02d.a</answer-path-pattern>
                <tests/>
            </testset>
        </checker>
        <validators>
            <validator>
                <source path="files/Validator.cpp" type="cpp.g++17"/>
                <testset>
                    <test-count>1</test-count>
                    <input-path-pattern>files/tests/validator-tests/%02d</input-path-pattern>
                    <tests>
                        <test verdict="valid"/>
                    </tests>
                </testset>
            </validator>
        </validators>
        <solutions>
            <solution tag="time-limit-exceeded">
                <source path="solutions/jh01533_naive.cpp" type="cpp.g++17"/>
            </solution>
            <solution tag="accepted">
                <source path="solutions/ksoosung77_sol.cpp" type="cpp.g++17"/>
            </solution>
            <solution tag="time-limit-exceeded-or-accepted">
                <source path="solutions/ksoosung77_sol_or_tl.cpp" type="cpp.g++17"/>
            </solution>
            <solution tag="time-limit-exceeded-or-accepted">
                <source path="solutions/ksoosung77_sol_or_tl2.cpp" type="cpp.g++17"/>
            </solution>
            <solution tag="time-limit-exceeded-or-accepted">
                <source path="solutions/ksoosung77_test.cpp" type="cpp.g++17"/>
            </solution>
            <solution tag="main">
                <source path="solutions/main_solution_64.cpp" type="cpp.gcc11-64-winlibs-g++20"/>
            </solution>
            <solution tag="accepted">
                <source path="solutions/mz_M_sol.cpp" type="cpp.g++17"/>
            </solution>
            <solution tag="accepted">
                <source path="solutions/tony9402_ac.cpp" type="cpp.g++17"/>
            </solution>
        </solutions>
    </assets>
    <properties>
        <property name="tests-wellformed" value="true"/>
    </properties>
    <stresses>
        <stress-count>1</stress-count>
        <stress-path-pattern>stresses/%03d</stress-path-pattern>
        <list>
            <stress index="1" path="stresses/001"/>
        </list>
    </stresses>
    <tags>
        <tag value="bitmask"/>
        <tag value="lazy segment tree"/>
    </tags>
</problem>
